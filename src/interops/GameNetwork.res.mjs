// Generated by ReScript, PLEASE EDIT WITH CARE

import Peerjs from "peerjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";

function makePeer() {
  return new Peerjs({});
}

function connect(peer, remoteId) {
  return peer.connect(remoteId);
}

function onOpen(peer, cb) {
  peer.on("open", cb);
}

function onError(peer, cb) {
  peer.on("error", cb);
}

function onConnection(peer, cb) {
  peer.on("connection", cb);
}

function onConnOpen(conn, cb) {
  conn.on("open", cb);
}

function onConnError(conn, cb) {
  conn.on("error", cb);
}

function onData(conn, cb) {
  conn.on("data", (function (data) {
          var obj = Js_json.decodeObject(data);
          if (obj === undefined) {
            return cb({
                        TAG: "Other",
                        _0: data
                      });
          }
          var match = Js_dict.get(obj, "type");
          if (match === undefined) {
            return cb({
                        TAG: "Other",
                        _0: data
                      });
          }
          if (!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") {
            return cb({
                        TAG: "Other",
                        _0: data
                      });
          }
          if (typeof match !== "string") {
            return cb({
                        TAG: "Other",
                        _0: data
                      });
          }
          switch (match) {
            case "rand" :
                var match$1 = Js_dict.get(obj, "rand");
                if (match$1 !== undefined && !(!Array.isArray(match$1) && (match$1 === null || typeof match$1 !== "object") && typeof match$1 !== "number" && typeof match$1 !== "string" && typeof match$1 !== "boolean" || typeof match$1 !== "number")) {
                  return cb({
                              TAG: "Rand",
                              _0: match$1 | 0
                            });
                } else {
                  return ;
                }
            case "team" :
                var teamOpt = Js_dict.get(obj, "team");
                var randOpt = Js_dict.get(obj, "rand");
                if (teamOpt !== undefined && !(!Array.isArray(teamOpt) && (teamOpt === null || typeof teamOpt !== "object") && typeof teamOpt !== "number" && typeof teamOpt !== "string" && typeof teamOpt !== "boolean" || !(typeof teamOpt === "string" && randOpt !== undefined && !(!Array.isArray(randOpt) && (randOpt === null || typeof randOpt !== "object") && typeof randOpt !== "number" && typeof randOpt !== "string" && typeof randOpt !== "boolean" || typeof randOpt !== "number")))) {
                  return cb({
                              TAG: "Team",
                              _0: teamOpt,
                              _1: randOpt | 0
                            });
                } else {
                  return ;
                }
            default:
              return cb({
                          TAG: "Other",
                          _0: data
                        });
          }
        }));
}

function sendRand(conn, rand) {
  var obj = {};
  obj["type"] = "rand";
  obj["rand"] = rand;
  conn.send(obj);
}

function sendTeam(conn, team, rand) {
  var obj = {};
  obj["type"] = "team";
  obj["team"] = team;
  obj["rand"] = rand;
  conn.send(obj);
}

var P;

export {
  P ,
  makePeer ,
  connect ,
  onOpen ,
  onError ,
  onConnection ,
  onConnOpen ,
  onConnError ,
  onData ,
  sendRand ,
  sendTeam ,
}
/* peerjs Not a pure module */
