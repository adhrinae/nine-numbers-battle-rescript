// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./components/Card.res.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as BoardSlot from "./components/BoardSlot.res.mjs";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GameNetwork from "./interops/GameNetwork.res.mjs";
import * as UseViewport from "./hooks/UseViewport.res.mjs";
import * as MobileGameTabs from "./components/MobileGameTabs.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as LandscapeRecommendation from "./components/LandscapeRecommendation.res.mjs";

var isTrueMobile = (function() {
    return 'ontouchstart' in window && window.innerWidth < 1024;
  });

function App(props) {
  var allCards = Belt_Array.makeBy(9, (function (i) {
          return i + 1 | 0;
        }));
  var match = React.useState(function () {
        return allCards;
      });
  var setHand = match[1];
  var hand = match[0];
  var match$1 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setMyBoard = match$1[1];
  var myBoard = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setCurrentRound = match$2[1];
  var currentRound = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setOppBoard = match$3[1];
  var oppBoard = match$3[0];
  var match$4 = React.useState(function () {
        return allCards;
      });
  var setOppHand = match$4[1];
  var oppHand = match$4[0];
  var match$5 = React.useState(function () {
        return false;
      });
  var setGameStarted = match$5[1];
  var match$6 = React.useState(function () {
        return "blue";
      });
  var setPlayerColor = match$6[1];
  var playerColor = match$6[0];
  var oppColor = playerColor === "blue" ? "red" : "blue";
  var match$7 = React.useState(function () {
        return false;
      });
  var setWaiting = match$7[1];
  var waiting = match$7[0];
  var match$8 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setWinners = match$8[1];
  var winners = match$8[0];
  var match$9 = React.useState(function () {
        
      });
  var setOppCard = match$9[1];
  var oppCard = match$9[0];
  var match$10 = React.useState(function () {
        
      });
  var setGameOver = match$10[1];
  var gameOver = match$10[0];
  var peer = React.useMemo((function () {
          return GameNetwork.makePeer();
        }), []);
  var match$11 = React.useState(function () {
        return "";
      });
  var setLocalId = match$11[1];
  var localId = match$11[0];
  var match$12 = React.useState(function () {
        return "";
      });
  var setRemoteIdInput = match$12[1];
  var remoteIdInput = match$12[0];
  var match$13 = React.useState(function () {
        
      });
  var setConn = match$13[1];
  var conn = match$13[0];
  var match$14 = React.useState(function () {
        return "";
      });
  var setConnStatus = match$14[1];
  var connStatus = match$14[0];
  var match$15 = React.useState(function () {
        return "";
      });
  var setRole = match$15[1];
  var role = match$15[0];
  var match$16 = React.useState(function () {
        
      });
  var setMyRand = match$16[1];
  var myRand = match$16[0];
  var match$17 = React.useState(function () {
        
      });
  var setOppRand = match$17[1];
  var oppRand = match$17[0];
  var match$18 = React.useState(function () {
        
      });
  var setMyTeam = match$18[1];
  var myTeam = match$18[0];
  var match$19 = React.useState(function () {
        return false;
      });
  var setCopied = match$19[1];
  var viewport = UseViewport.useViewport();
  var isMobile = isTrueMobile();
  var match$20 = React.useState(function () {
        return "MyView";
      });
  var setActiveTab = match$20[1];
  var onCardClick = function (n) {
    var match = Belt_Array.get(myBoard, currentRound);
    if (match !== undefined && !(Caml_option.valFromOption(match) !== undefined || conn === undefined)) {
      setMyBoard(function (prevBoard) {
            var newBoard = prevBoard.slice(0);
            Belt_Array.set(newBoard, currentRound, n);
            return newBoard;
          });
      setHand(function (prevHand) {
            return Belt_Array.keep(prevHand, (function (c) {
                          return c !== n;
                        }));
          });
      GameNetwork.sendPlayCard(Caml_option.valFromOption(conn), n);
      return setWaiting(function (param) {
                  return true;
                });
    }
    
  };
  React.useEffect((function () {
          GameNetwork.onOpen(peer, (function (id) {
                  setLocalId(function (param) {
                        return id;
                      });
                }));
          GameNetwork.onError(peer, (function (err) {
                  setConnStatus(function (param) {
                        return "Error: " + JSON.stringify(err);
                      });
                }));
        }), []);
  React.useEffect((function () {
          if (role === "host") {
            GameNetwork.onConnection(peer, (function (c) {
                    setConn(function (param) {
                          return Caml_option.some(c);
                        });
                    setConnStatus(function (param) {
                          return "Connected!";
                        });
                    var baseRand = Math.random() * 100000.0 | 0;
                    var rand = (baseRand << 1) + 1 | 0;
                    setMyRand(function (param) {
                          return rand;
                        });
                    GameNetwork.sendRand(c, rand);
                  }));
          }
          
        }), [role]);
  React.useEffect((function () {
          if (conn !== undefined) {
            var c = Caml_option.valFromOption(conn);
            GameNetwork.onConnOpen(c, (function () {
                    setConnStatus(function (param) {
                          return "Connected!";
                        });
                    var baseRand = Math.random() * 100000.0 | 0;
                    var rand = (baseRand << 1);
                    setMyRand(function (param) {
                          return rand;
                        });
                    GameNetwork.sendRand(c, rand);
                  }));
            GameNetwork.onData(c, (function ($$event) {
                    if (typeof $$event !== "object") {
                      return setWaiting(function (param) {
                                  return false;
                                });
                    }
                    switch ($$event.TAG) {
                      case "Rand" :
                          var n = $$event._0;
                          return setOppRand(function (param) {
                                      return n;
                                    });
                      case "Team" :
                          var n$1 = $$event._1;
                          setOppRand(function (param) {
                                return n$1;
                              });
                          var myTeamName = $$event._0 === "red" ? "blue" : "red";
                          return setMyTeam(function (param) {
                                      return myTeamName;
                                    });
                      case "PlayCard" :
                          var card = $$event._0;
                          setOppCard(function (param) {
                                return card;
                              });
                          return setOppHand(function (prev) {
                                      return Belt_Array.keep(prev, (function (c) {
                                                    return c !== card;
                                                  }));
                                    });
                      case "GameOver" :
                          var winner = $$event._0;
                          return setGameOver(function (param) {
                                      return winner;
                                    });
                      case "AnnounceWinner" :
                      case "Other" :
                          return ;
                      
                    }
                  }));
            GameNetwork.onConnError(c, (function (err) {
                    setConnStatus(function (param) {
                          return "연결 실패: " + JSON.stringify(err);
                        });
                  }));
          }
          
        }), [conn]);
  React.useEffect((function () {
          if (myTeam === undefined && oppRand !== undefined && myRand !== undefined && role === "host") {
            var myR = Belt_Option.getExn(myRand);
            var oppR = Belt_Option.getExn(oppRand);
            var myTeamName = myR > oppR ? "red" : "blue";
            setMyTeam(function (param) {
                  return myTeamName;
                });
            if (conn !== undefined) {
              GameNetwork.sendTeam(Caml_option.valFromOption(conn), myTeamName, myR);
            }
            
          }
          
        }), [
        myTeam,
        myRand,
        oppRand,
        role,
        conn
      ]);
  React.useEffect((function () {
          var myMoveOpt = Belt_Array.get(myBoard, currentRound);
          if (myMoveOpt !== undefined) {
            var myMove = Caml_option.valFromOption(myMoveOpt);
            if (myMove !== undefined && oppCard !== undefined) {
              var winnerText = myMove === oppCard ? "Tie" : (
                  myMove === 1 && oppCard === 9 || !(myMove === 9 && oppCard === 1 || myMove <= oppCard) ? "You win" : "Opponent wins"
                );
              setOppBoard(function (prev) {
                    var newBoard = prev.slice(0);
                    Belt_Array.set(newBoard, currentRound, oppCard);
                    return newBoard;
                  });
              setWinners(function (prev) {
                    var newWinners = prev.slice(0);
                    Belt_Array.set(newWinners, currentRound, winnerText);
                    return newWinners;
                  });
              var currentWins = Belt_Array.keep(winners, (function (w) {
                      if (w === "You win") {
                        return true;
                      } else {
                        return false;
                      }
                    })).length;
              var myWins = currentWins + (
                winnerText === "You win" ? 1 : 0
              ) | 0;
              var currentOppWins = Belt_Array.keep(winners, (function (w) {
                      if (w === "Opponent wins") {
                        return true;
                      } else {
                        return false;
                      }
                    })).length;
              var oppWins = currentOppWins + (
                winnerText === "Opponent wins" ? 1 : 0
              ) | 0;
              setOppCard(function (param) {
                    
                  });
              var nextRound = currentRound + 1 | 0;
              setCurrentRound(function (param) {
                    return nextRound;
                  });
              setWaiting(function (param) {
                    return false;
                  });
              if (myWins >= 5 || oppWins >= 5 || nextRound >= 9) {
                var finalWinner = myWins >= 5 ? "You are the winner!" : (
                    oppWins >= 5 ? "Opponent wins the game!" : (
                        myWins > oppWins ? "You are the winner!" : (
                            oppWins > myWins ? "Opponent wins the game!" : "It's a tie!"
                          )
                      )
                  );
                setGameOver(function (param) {
                      return finalWinner;
                    });
              }
              
            }
            
          }
          
        }), [
        myBoard,
        oppCard
      ]);
  if (role === "") {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("h1", {
                                children: "구룡쟁패",
                                className: "text-3xl font-bold text-gray-800 mb-2"
                              }),
                          JsxRuntime.jsx("p", {
                                children: "친구와 함께 즐기는 카드 게임",
                                className: "text-gray-600"
                              })
                        ],
                        className: "text-center mb-8"
                      }),
                  JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("button", {
                                children: "🎮 새 게임 시작",
                                className: "w-full py-4 bg-green-500 hover:bg-green-600 text-white font-semibold rounded-lg shadow-md transition-colors duration-200",
                                onClick: (function (param) {
                                    setRole(function (param) {
                                          return "host";
                                        });
                                  })
                              }),
                          JsxRuntime.jsx("button", {
                                children: "🔗 게임 참여",
                                className: "w-full py-4 bg-purple-500 hover:bg-purple-600 text-white font-semibold rounded-lg shadow-md transition-colors duration-200",
                                onClick: (function (param) {
                                    setRole(function (param) {
                                          return "join";
                                        });
                                  })
                              })
                        ],
                        className: "w-full max-w-sm space-y-4"
                      })
                ],
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-blue-50 to-purple-50"
              });
  }
  if (role === "host" && conn === undefined) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx("span", {
                                            children: "🎮",
                                            className: "text-2xl"
                                          }),
                                      className: "w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                    }),
                                JsxRuntime.jsx("h2", {
                                      children: "게임 방 생성됨",
                                      className: "text-xl font-bold text-gray-800 mb-2"
                                    }),
                                JsxRuntime.jsx("p", {
                                      children: "친구가 참여할 수 있도록 ID를 공유하세요",
                                      className: "text-gray-600 text-sm"
                                    })
                              ],
                              className: "text-center mb-6"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx("label", {
                                                    children: "게임 ID",
                                                    className: "block text-xs text-gray-500 mb-1"
                                                  }),
                                              JsxRuntime.jsx("div", {
                                                    children: localId,
                                                    className: "font-mono text-sm text-gray-800 break-all"
                                                  })
                                            ],
                                            className: "flex-1"
                                          }),
                                      JsxRuntime.jsx("button", {
                                            children: match$19[0] ? "복사됨!" : "복사",
                                            className: "ml-3 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium rounded-lg transition-colors duration-200",
                                            onClick: (function (param) {
                                                Js_promise.then_((function () {
                                                        setCopied(function (param) {
                                                              return true;
                                                            });
                                                        setTimeout((function () {
                                                                setCopied(function (param) {
                                                                      return false;
                                                                    });
                                                              }), 1200);
                                                        return Promise.resolve();
                                                      }), navigator.clipboard.writeText(localId));
                                              })
                                          })
                                    ],
                                    className: "flex items-center justify-between"
                                  }),
                              className: "bg-gray-50 rounded-lg p-4 mb-4"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            className: "animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-500 mr-2"
                                          }),
                                      JsxRuntime.jsx("span", {
                                            children: "상대방 연결 대기중...",
                                            className: "text-yellow-700 text-sm"
                                          })
                                    ],
                                    className: "inline-flex items-center px-4 py-2 bg-yellow-50 rounded-lg"
                                  }),
                              className: "text-center"
                            })
                      ],
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-green-50 to-blue-50"
              });
  }
  if (role === "join" && conn === undefined) {
    var isInputEmpty = remoteIdInput.trim() === "";
    var isConnecting = connStatus === "연결 중...";
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx("span", {
                                            children: "🔗",
                                            className: "text-2xl"
                                          }),
                                      className: "w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                    }),
                                JsxRuntime.jsx("h2", {
                                      children: "게임 참여",
                                      className: "text-xl font-bold text-gray-800 mb-2"
                                    }),
                                JsxRuntime.jsx("p", {
                                      children: "친구로부터 받은 게임 ID를 입력하세요",
                                      className: "text-gray-600 text-sm"
                                    })
                              ],
                              className: "text-center mb-6"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("label", {
                                              children: "게임 ID",
                                              className: "block text-sm font-medium text-gray-700 mb-2"
                                            }),
                                        JsxRuntime.jsx("input", {
                                              className: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none transition-colors duration-200 font-mono text-sm",
                                              disabled: isConnecting,
                                              placeholder: "예: abc123def456",
                                              value: remoteIdInput,
                                              onChange: (function (e) {
                                                  setRemoteIdInput(function (param) {
                                                        return e.target.value;
                                                      });
                                                })
                                            })
                                      ]
                                    }),
                                JsxRuntime.jsx("button", {
                                      children: isConnecting ? JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("div", {
                                                      className: "animate-spin rounded-full h-4 w-4 border-b-2 border-gray-500 mr-2"
                                                    }),
                                                "연결 중..."
                                              ],
                                              className: "flex items-center justify-center"
                                            }) : "게임 참여하기",
                                      className: isInputEmpty || isConnecting ? "w-full py-3 bg-gray-300 text-gray-500 font-semibold rounded-lg cursor-not-allowed" : "w-full py-3 bg-purple-500 hover:bg-purple-600 text-white font-semibold rounded-lg shadow-md transition-colors duration-200",
                                      disabled: isInputEmpty || isConnecting,
                                      onClick: (function (param) {
                                          if (!(!isInputEmpty && !isConnecting)) {
                                            return ;
                                          }
                                          setConnStatus(function (param) {
                                                return "연결 중...";
                                              });
                                          var trimmedId = remoteIdInput.trim();
                                          var c = GameNetwork.connect(peer, trimmedId);
                                          setConn(function (param) {
                                                return Caml_option.some(c);
                                              });
                                        })
                                    }),
                                connStatus !== "" && connStatus !== "연결 중..." ? JsxRuntime.jsx("div", {
                                        children: JsxRuntime.jsx("div", {
                                              children: connStatus,
                                              className: Js_string.includes("연결 실패", connStatus) || Js_string.includes("Error", connStatus) ? "inline-block px-3 py-2 bg-red-50 text-red-700 text-sm rounded-lg" : "inline-block px-3 py-2 bg-blue-50 text-blue-700 text-sm rounded-lg"
                                            }),
                                        className: "text-center"
                                      }) : null
                              ],
                              className: "space-y-4"
                            })
                      ],
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-purple-50 to-pink-50"
              });
  }
  if (conn === undefined) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("span", {
                                          children: "⚠️",
                                          className: "text-2xl"
                                        }),
                                    className: "w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: "연결 상태",
                                    className: "text-xl font-bold text-gray-800 mb-2"
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: connStatus,
                                    className: "text-gray-600"
                                  })
                            ],
                            className: "text-center"
                          }),
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-gray-50 to-blue-50"
              });
  }
  if (oppRand === undefined || myRand === undefined) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"
                                        }),
                                    className: "w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: "팀 결정 중...",
                                    className: "text-xl font-bold text-gray-800 mb-2"
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: "랜덤하게 팀을 배정하고 있습니다",
                                    className: "text-gray-600 text-sm"
                                  })
                            ],
                            className: "text-center"
                          }),
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-blue-50 to-indigo-50"
              });
  }
  if (myTeam === undefined && oppRand !== undefined && myRand !== undefined) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"
                                        }),
                                    className: "w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4"
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: "팀 결정 중...",
                                    className: "text-xl font-bold text-gray-800 mb-2"
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: "랜덤하게 팀을 배정하고 있습니다",
                                    className: "text-gray-600 text-sm"
                                  })
                            ],
                            className: "text-center"
                          }),
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b from-blue-50 to-indigo-50"
              });
  }
  if (myTeam !== undefined && !match$5[0]) {
    var team = Belt_Option.getExn(myTeam);
    var teamName = team === "red" ? "레드" : "블루";
    var bgGradient = team === "red" ? "from-red-50 to-pink-50" : "from-blue-50 to-indigo-50";
    var iconBg = team === "red" ? "bg-red-100" : "bg-blue-100";
    var buttonBg = team === "red" ? "bg-red-500 hover:bg-red-600" : "bg-blue-500 hover:bg-blue-600";
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx("span", {
                                            children: team === "red" ? "🔴" : "🔵",
                                            className: "text-2xl"
                                          }),
                                      className: "w-16 h-16 " + iconBg + " rounded-full flex items-center justify-center mx-auto mb-4"
                                    }),
                                JsxRuntime.jsx("h2", {
                                      children: "팀 배정 완료!",
                                      className: "text-xl font-bold text-gray-800 mb-2"
                                    }),
                                JsxRuntime.jsx("p", {
                                      children: "당신은 " + teamName + " 팀으로 배정되었습니다",
                                      className: "text-gray-600 text-sm mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: teamName + " 팀",
                                      className: "inline-block px-4 py-2 rounded-full text-white font-medium " + (
                                        team === "red" ? "bg-red-500" : "bg-blue-500"
                                      )
                                    })
                              ],
                              className: "text-center mb-6"
                            }),
                        JsxRuntime.jsx("button", {
                              children: "🚀 게임 시작하기",
                              className: "w-full py-4 " + buttonBg + " text-white font-semibold rounded-lg shadow-md transition-colors duration-200",
                              onClick: (function (param) {
                                  setPlayerColor(function (param) {
                                        return team;
                                      });
                                  setGameStarted(function (param) {
                                        return true;
                                      });
                                })
                            })
                      ],
                      className: "w-full max-w-md bg-white rounded-2xl shadow-lg p-6"
                    }),
                className: "min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-b " + bgGradient
              });
  }
  if (isMobile) {
    return JsxRuntime.jsxs("div", {
                children: [
                  viewport.shouldRecommendLandscape ? JsxRuntime.jsx(LandscapeRecommendation.make, {
                          onDismiss: (function () {
                              
                            })
                        }) : null,
                  JsxRuntime.jsx(MobileGameTabs.make, {
                        activeTab: match$20[0],
                        onTabChange: (function (tab) {
                            setActiveTab(function (param) {
                                  return tab;
                                });
                          }),
                        myWins: Belt_Array.keep(winners, (function (w) {
                                return Caml_obj.equal(w, "You win");
                              })).length,
                        oppWins: Belt_Array.keep(winners, (function (w) {
                                return Caml_obj.equal(w, "Opponent wins");
                              })).length,
                        currentRound: currentRound,
                        waiting: waiting,
                        myBoard: myBoard,
                        oppBoard: oppBoard,
                        hand: hand,
                        oppHand: oppHand,
                        playerColor: playerColor,
                        oppColor: oppColor,
                        winners: winners,
                        gameOver: gameOver,
                        onCardClick: onCardClick
                      })
                ],
                className: "h-screen w-screen overflow-hidden"
              });
  }
  var myWins = Belt_Array.keep(winners, (function (w) {
          if (w === "You win") {
            return true;
          } else {
            return false;
          }
        })).length;
  var oppWins = Belt_Array.keep(winners, (function (w) {
          if (w === "Opponent wins") {
            return true;
          } else {
            return false;
          }
        })).length;
  var tmp;
  if (currentRound > 0) {
    var match$21 = Belt_Array.get(winners, currentRound - 1 | 0);
    if (match$21 !== undefined) {
      var result = Caml_option.valFromOption(match$21);
      tmp = result !== undefined ? JsxRuntime.jsx("div", {
              children: "Round " + String(currentRound) + " result: " + result,
              className: "my-2"
            }) : null;
    } else {
      tmp = null;
    }
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsx("section", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("span", {
                                    children: "Opponent's Hand:",
                                    className: "mr-2"
                                  }),
                              Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                          return c % 2 === 1;
                                        })), (function (card, i) {
                                      return JsxRuntime.jsx(Card.make, {
                                                  number: 1,
                                                  onClick: (function () {
                                                      
                                                    }),
                                                  selected: false,
                                                  disabled: true,
                                                  teamColor: "white",
                                                  isHidden: true
                                                }, "opp-white-" + String(card) + "-" + String(i));
                                    })),
                              Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                          return c % 2 === 0;
                                        })), (function (card, i) {
                                      return JsxRuntime.jsx(Card.make, {
                                                  number: 2,
                                                  onClick: (function () {
                                                      
                                                    }),
                                                  selected: false,
                                                  disabled: true,
                                                  teamColor: "black",
                                                  isHidden: true
                                                }, "opp-black-" + String(card) + "-" + String(i));
                                    }))
                            ],
                            className: "flex flex-row items-center mr-4"
                          }),
                      className: "flex flex-row mb-2"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(oppBoard, (function (i, cardOpt) {
                              var match = Belt_Array.get(winners, i);
                              var winnerBgOpp;
                              if (match !== undefined) {
                                var w = Caml_option.valFromOption(match);
                                winnerBgOpp = w !== undefined ? (
                                    w === "Opponent wins" ? " bg-red-200" : (
                                        w === "You win" ? " bg-gray-200" : " bg-yellow-200"
                                      )
                                  ) : "";
                              } else {
                                winnerBgOpp = "";
                              }
                              var showCard = Belt_Option.isSome(gameOver);
                              var displayCard = showCard ? cardOpt : undefined;
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: displayCard,
                                          className: "transform rotate-180" + winnerBgOpp,
                                          teamColor: oppColor
                                        }, "opp-" + String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                waiting ? JsxRuntime.jsx("div", {
                        children: "Waiting for opponent...",
                        className: "my-2"
                      }) : null,
                JsxRuntime.jsx("div", {
                      children: "Score: You " + String(myWins) + " - " + String(oppWins) + " Opponent",
                      className: "my-2 text-lg font-bold"
                    }),
                tmp,
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                              var ringClass = i === currentRound ? (
                                  playerColor === "blue" ? "ring-4 ring-blue-400" : "ring-4 ring-red-400"
                                ) : "";
                              var match = Belt_Array.get(winners, i);
                              var winnerBgMy;
                              if (match !== undefined) {
                                var w = Caml_option.valFromOption(match);
                                winnerBgMy = w !== undefined ? (
                                    w === "You win" ? " bg-green-200" : (
                                        w === "Opponent wins" ? " bg-gray-200" : " bg-yellow-200"
                                      )
                                  ) : "";
                              } else {
                                winnerBgMy = "";
                              }
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: cardOpt,
                                          className: ringClass + winnerBgMy,
                                          teamColor: playerColor
                                        }, String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.map(hand, (function (n) {
                              return JsxRuntime.jsx(Card.make, {
                                          number: n,
                                          onClick: (function () {
                                              onCardClick(n);
                                            }),
                                          selected: false,
                                          disabled: waiting || Belt_Option.isSome(gameOver),
                                          teamColor: playerColor
                                        }, n.toString());
                            })),
                      className: "flex flex-row"
                    }),
                gameOver !== undefined ? JsxRuntime.jsx("div", {
                        children: "Game Over: " + gameOver,
                        className: "mt-4 text-2xl font-bold"
                      }) : null
              ],
              className: "flex flex-col items-center p-4"
            });
}

var make = App;

export {
  make ,
}
/* Card Not a pure module */
