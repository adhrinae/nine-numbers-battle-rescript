// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./components/Card.res.mjs";
import * as React from "react";
import * as BoardSlot from "./components/BoardSlot.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var allCards = Belt_Array.makeBy(9, (function (i) {
          return i + 1 | 0;
        }));
  var match = React.useState(function () {
        return allCards;
      });
  var setHand = match[1];
  var match$1 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setMyBoard = match$1[1];
  var myBoard = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setCurrentRound = match$2[1];
  var currentRound = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setOppBoard = match$3[1];
  var match$4 = React.useState(function () {
        return allCards;
      });
  var setOppHand = match$4[1];
  var oppHand = match$4[0];
  var match$5 = React.useState(function () {
        return false;
      });
  var setGameStarted = match$5[1];
  var match$6 = React.useState(function () {
        return "blue";
      });
  var setPlayerColor = match$6[1];
  var playerColor = match$6[0];
  var oppColor = playerColor === "blue" ? "red" : "blue";
  var match$7 = React.useState(function () {
        return false;
      });
  var setWaiting = match$7[1];
  var match$8 = React.useState(function () {
        return "";
      });
  var setLastResult = match$8[1];
  var lastResult = match$8[0];
  var match$9 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setWinners = match$9[1];
  var winners = match$9[0];
  var oppWhiteCount = Belt_Array.keep(oppHand, (function (c) {
          return c % 2 === 1;
        })).length;
  var oppBlackCount = Belt_Array.keep(oppHand, (function (c) {
          return c % 2 === 0;
        })).length;
  if (match$5[0]) {
    return JsxRuntime.jsxs("main", {
                children: [
                  JsxRuntime.jsxs("section", {
                        children: [
                          JsxRuntime.jsx("div", {
                                children: "Opponent: " + String(oppWhiteCount) + " white cards",
                                className: "mr-4"
                              }),
                          JsxRuntime.jsx("div", {
                                children: String(oppBlackCount) + " black cards"
                              })
                        ],
                        className: "flex flex-row mb-2"
                      }),
                  JsxRuntime.jsx("section", {
                        children: Belt_Array.mapWithIndex(match$3[0], (function (i, cardOpt) {
                                var match = Belt_Array.get(winners, i);
                                var winnerBgOpp;
                                if (match !== undefined) {
                                  var w = Caml_option.valFromOption(match);
                                  winnerBgOpp = w !== undefined ? (
                                      w === "Opponent wins" ? " bg-red-200" : (
                                          w === "You win" ? " bg-gray-200" : " bg-yellow-200"
                                        )
                                    ) : "";
                                } else {
                                  winnerBgOpp = "";
                                }
                                return JsxRuntime.jsx(BoardSlot.make, {
                                            round: i + 1 | 0,
                                            card: cardOpt,
                                            className: "transform rotate-180" + winnerBgOpp,
                                            teamColor: oppColor
                                          }, "opp-" + String(i));
                              })),
                        className: "flex flex-row mb-6"
                      }),
                  match$7[0] ? JsxRuntime.jsx("div", {
                          children: "Waiting for opponent...",
                          className: "my-2"
                        }) : null,
                  lastResult !== "" ? JsxRuntime.jsx("div", {
                          children: "Result: " + lastResult,
                          className: "my-2"
                        }) : null,
                  JsxRuntime.jsx("section", {
                        children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                                var ringClass = i === currentRound ? (
                                    playerColor === "blue" ? "ring-4 ring-blue-400" : "ring-4 ring-red-400"
                                  ) : "";
                                var match = Belt_Array.get(winners, i);
                                var winnerBgMy;
                                if (match !== undefined) {
                                  var w = Caml_option.valFromOption(match);
                                  winnerBgMy = w !== undefined ? (
                                      w === "You win" ? " bg-green-200" : (
                                          w === "Opponent wins" ? " bg-gray-200" : " bg-yellow-200"
                                        )
                                    ) : "";
                                } else {
                                  winnerBgMy = "";
                                }
                                return JsxRuntime.jsx(BoardSlot.make, {
                                            round: i + 1 | 0,
                                            card: cardOpt,
                                            className: ringClass + winnerBgMy,
                                            teamColor: playerColor
                                          }, String(i));
                              })),
                        className: "flex flex-row mb-6"
                      }),
                  JsxRuntime.jsx("section", {
                        children: Belt_Array.map(match[0], (function (n) {
                                return JsxRuntime.jsx(Card.make, {
                                            number: n,
                                            onClick: (function () {
                                                var match = Belt_Array.get(myBoard, currentRound);
                                                if (match !== undefined && Caml_option.valFromOption(match) === undefined) {
                                                  setMyBoard(function (prevBoard) {
                                                        var newBoard = prevBoard.slice(0);
                                                        Belt_Array.set(newBoard, currentRound, n);
                                                        return newBoard;
                                                      });
                                                  setHand(function (prevHand) {
                                                        return Belt_Array.keep(prevHand, (function (c) {
                                                                      return c !== n;
                                                                    }));
                                                      });
                                                  setCurrentRound(function (prevRound) {
                                                        return prevRound + 1 | 0;
                                                      });
                                                  setWaiting(function (param) {
                                                        return true;
                                                      });
                                                  setTimeout((function () {
                                                          var oppMove = (Math.random() * 9.0 | 0) + 1 | 0;
                                                          setOppBoard(function (prev) {
                                                                var newBoard = prev.slice(0);
                                                                Belt_Array.set(newBoard, currentRound, oppMove);
                                                                return newBoard;
                                                              });
                                                          setOppHand(function (prev) {
                                                                return Belt_Array.keep(prev, (function (c) {
                                                                              return c !== oppMove;
                                                                            }));
                                                              });
                                                          var winnerText = n === oppMove ? "Tie" : (
                                                              n === 1 && oppMove === 9 || !(n === 9 && oppMove === 1 || n <= oppMove) ? "You win" : "Opponent wins"
                                                            );
                                                          setLastResult(function (param) {
                                                                return winnerText;
                                                              });
                                                          setWinners(function (prev) {
                                                                var newW = prev.slice(0);
                                                                Belt_Array.set(newW, currentRound, winnerText);
                                                                return newW;
                                                              });
                                                          setWaiting(function (param) {
                                                                return false;
                                                              });
                                                        }), 3000);
                                                  return ;
                                                }
                                                
                                              }),
                                            selected: false,
                                            disabled: false,
                                            teamColor: playerColor
                                          }, n.toString());
                              })),
                        className: "flex flex-row"
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  } else {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("button", {
                        children: "Play as Blue",
                        className: "m-2 px-4 py-2 bg-blue-500 text-white rounded",
                        onClick: (function (param) {
                            setPlayerColor(function (param) {
                                  return "blue";
                                });
                            setGameStarted(function (param) {
                                  return true;
                                });
                          })
                      }),
                  JsxRuntime.jsx("button", {
                        children: "Play as Red",
                        className: "m-2 px-4 py-2 bg-red-500 text-white rounded",
                        onClick: (function (param) {
                            setPlayerColor(function (param) {
                                  return "red";
                                });
                            setGameStarted(function (param) {
                                  return true;
                                });
                          })
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  }
}

var make = App;

export {
  make ,
}
/* Card Not a pure module */
