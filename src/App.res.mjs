// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./components/Card.res.mjs";
import * as React from "react";
import * as BoardSlot from "./components/BoardSlot.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var allCards = Belt_Array.makeBy(9, (function (i) {
          return i + 1 | 0;
        }));
  var match = React.useState(function () {
        return allCards;
      });
  var setHand = match[1];
  var match$1 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setMyBoard = match$1[1];
  var myBoard = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setCurrentRound = match$2[1];
  var currentRound = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setOppBoard = match$3[1];
  var match$4 = React.useState(function () {
        return false;
      });
  var setWaiting = match$4[1];
  var match$5 = React.useState(function () {
        return allCards;
      });
  var setOppHand = match$5[1];
  var oppHand = match$5[0];
  var oppWhiteCount = Belt_Array.keep(oppHand, (function (c) {
          return c % 2 === 1;
        })).length;
  var oppBlackCount = Belt_Array.keep(oppHand, (function (c) {
          return c % 2 === 0;
        })).length;
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsxs("section", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: "Opponent: " + String(oppWhiteCount) + " white cards",
                              className: "mr-4"
                            }),
                        JsxRuntime.jsx("div", {
                              children: String(oppBlackCount) + " black cards"
                            })
                      ],
                      className: "flex flex-row mb-2"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(match$3[0], (function (i, cardOpt) {
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: cardOpt,
                                          className: "transform rotate-180"
                                        }, "opp-" + String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                match$4[0] ? JsxRuntime.jsx("div", {
                        children: "Waiting for opponent...",
                        className: "my-2"
                      }) : null,
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: cardOpt,
                                          className: i === currentRound ? "ring-4 ring-blue-400" : ""
                                        }, String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.map(match[0], (function (n) {
                              return JsxRuntime.jsx(Card.make, {
                                          number: n,
                                          onClick: (function () {
                                              var match = Belt_Array.get(myBoard, currentRound);
                                              if (match !== undefined && Caml_option.valFromOption(match) === undefined) {
                                                setMyBoard(function (prevBoard) {
                                                      var newBoard = prevBoard.slice(0);
                                                      Belt_Array.set(newBoard, currentRound, n);
                                                      return newBoard;
                                                    });
                                                setHand(function (prevHand) {
                                                      return Belt_Array.keep(prevHand, (function (c) {
                                                                    return c !== n;
                                                                  }));
                                                    });
                                                setCurrentRound(function (prevRound) {
                                                      return prevRound + 1 | 0;
                                                    });
                                                setWaiting(function (param) {
                                                      return true;
                                                    });
                                                setTimeout((function () {
                                                        setOppBoard(function (prev) {
                                                              var newBoard = prev.slice(0);
                                                              Belt_Array.set(newBoard, currentRound, n);
                                                              return newBoard;
                                                            });
                                                        setOppHand(function (prev) {
                                                              return Belt_Array.keep(prev, (function (c) {
                                                                            return c !== n;
                                                                          }));
                                                            });
                                                        setWaiting(function (param) {
                                                              return false;
                                                            });
                                                      }), 3000);
                                                return ;
                                              }
                                              
                                            }),
                                          selected: false,
                                          disabled: false
                                        }, n.toString());
                            })),
                      className: "flex flex-row"
                    })
              ],
              className: "flex flex-col items-center p-4"
            });
}

var make = App;

export {
  make ,
}
/* Card Not a pure module */
