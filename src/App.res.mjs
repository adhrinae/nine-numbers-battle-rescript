// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./components/Card.res.mjs";
import * as React from "react";
import * as BoardSlot from "./components/BoardSlot.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GameNetwork from "./interops/GameNetwork.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var allCards = Belt_Array.makeBy(9, (function (i) {
          return i + 1 | 0;
        }));
  var match = React.useState(function () {
        return allCards;
      });
  var setHand = match[1];
  var match$1 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setMyBoard = match$1[1];
  var myBoard = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setCurrentRound = match$2[1];
  var currentRound = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setOppBoard = match$3[1];
  var match$4 = React.useState(function () {
        return allCards;
      });
  var setOppHand = match$4[1];
  var oppHand = match$4[0];
  var match$5 = React.useState(function () {
        return false;
      });
  var setGameStarted = match$5[1];
  var match$6 = React.useState(function () {
        return "blue";
      });
  var setPlayerColor = match$6[1];
  var playerColor = match$6[0];
  var oppColor = playerColor === "blue" ? "red" : "blue";
  var match$7 = React.useState(function () {
        return false;
      });
  var setWaiting = match$7[1];
  var waiting = match$7[0];
  var match$8 = React.useState(function () {
        return Belt_Array.make(9, undefined);
      });
  var setWinners = match$8[1];
  var winners = match$8[0];
  var match$9 = React.useState(function () {
        
      });
  var setOppCard = match$9[1];
  var oppCard = match$9[0];
  var match$10 = React.useState(function () {
        
      });
  var setGameOver = match$10[1];
  var gameOver = match$10[0];
  var peer = React.useMemo((function () {
          return GameNetwork.makePeer();
        }), []);
  var match$11 = React.useState(function () {
        return "";
      });
  var setLocalId = match$11[1];
  var localId = match$11[0];
  var match$12 = React.useState(function () {
        return "";
      });
  var setRemoteIdInput = match$12[1];
  var remoteIdInput = match$12[0];
  var match$13 = React.useState(function () {
        
      });
  var setConn = match$13[1];
  var conn = match$13[0];
  var match$14 = React.useState(function () {
        return "";
      });
  var setConnStatus = match$14[1];
  var connStatus = match$14[0];
  var match$15 = React.useState(function () {
        return "";
      });
  var setRole = match$15[1];
  var role = match$15[0];
  var match$16 = React.useState(function () {
        
      });
  var setMyRand = match$16[1];
  var myRand = match$16[0];
  var match$17 = React.useState(function () {
        
      });
  var setOppRand = match$17[1];
  var oppRand = match$17[0];
  var match$18 = React.useState(function () {
        
      });
  var setMyTeam = match$18[1];
  var myTeam = match$18[0];
  var match$19 = React.useState(function () {
        return false;
      });
  var setCopied = match$19[1];
  React.useEffect((function () {
          GameNetwork.onOpen(peer, (function (id) {
                  setLocalId(function (param) {
                        return id;
                      });
                }));
          GameNetwork.onError(peer, (function (err) {
                  setConnStatus(function (param) {
                        return "Error: " + JSON.stringify(err);
                      });
                }));
        }), []);
  React.useEffect((function () {
          if (role === "host") {
            GameNetwork.onConnection(peer, (function (c) {
                    setConn(function (param) {
                          return Caml_option.some(c);
                        });
                    setConnStatus(function (param) {
                          return "Connected!";
                        });
                    var baseRand = Math.random() * 100000.0 | 0;
                    var rand = (baseRand << 1) + 1 | 0;
                    setMyRand(function (param) {
                          return rand;
                        });
                    GameNetwork.sendRand(c, rand);
                  }));
          }
          
        }), [role]);
  React.useEffect((function () {
          if (conn !== undefined) {
            var c = Caml_option.valFromOption(conn);
            GameNetwork.onConnOpen(c, (function () {
                    setConnStatus(function (param) {
                          return "Connected!";
                        });
                    var baseRand = Math.random() * 100000.0 | 0;
                    var rand = (baseRand << 1);
                    setMyRand(function (param) {
                          return rand;
                        });
                    GameNetwork.sendRand(c, rand);
                  }));
            GameNetwork.onData(c, (function ($$event) {
                    if (typeof $$event !== "object") {
                      return setWaiting(function (param) {
                                  return false;
                                });
                    }
                    switch ($$event.TAG) {
                      case "Rand" :
                          var n = $$event._0;
                          return setOppRand(function (param) {
                                      return n;
                                    });
                      case "Team" :
                          var n$1 = $$event._1;
                          setOppRand(function (param) {
                                return n$1;
                              });
                          var myTeamName = $$event._0 === "red" ? "blue" : "red";
                          return setMyTeam(function (param) {
                                      return myTeamName;
                                    });
                      case "PlayCard" :
                          var card = $$event._0;
                          setOppCard(function (param) {
                                return card;
                              });
                          return setOppHand(function (prev) {
                                      return Belt_Array.keep(prev, (function (c) {
                                                    return c !== card;
                                                  }));
                                    });
                      case "GameOver" :
                          var winner = $$event._0;
                          return setGameOver(function (param) {
                                      return winner;
                                    });
                      case "AnnounceWinner" :
                      case "Other" :
                          return ;
                      
                    }
                  }));
            GameNetwork.onConnError(c, (function (err) {
                    setConnStatus(function (param) {
                          return "연결 실패: " + JSON.stringify(err);
                        });
                  }));
          }
          
        }), [conn]);
  React.useEffect((function () {
          if (myTeam === undefined && oppRand !== undefined && myRand !== undefined && role === "host") {
            var myR = Belt_Option.getExn(myRand);
            var oppR = Belt_Option.getExn(oppRand);
            var myTeamName = myR > oppR ? "red" : "blue";
            setMyTeam(function (param) {
                  return myTeamName;
                });
            if (conn !== undefined) {
              GameNetwork.sendTeam(Caml_option.valFromOption(conn), myTeamName, myR);
            }
            
          }
          
        }), [
        myTeam,
        myRand,
        oppRand,
        role,
        conn
      ]);
  React.useEffect((function () {
          var myMoveOpt = Belt_Array.get(myBoard, currentRound);
          if (myMoveOpt !== undefined) {
            var myMove = Caml_option.valFromOption(myMoveOpt);
            if (myMove !== undefined && oppCard !== undefined) {
              var winnerText = myMove === oppCard ? "Tie" : (
                  myMove === 1 && oppCard === 9 || !(myMove === 9 && oppCard === 1 || myMove <= oppCard) ? "You win" : "Opponent wins"
                );
              setOppBoard(function (prev) {
                    var newBoard = prev.slice(0);
                    Belt_Array.set(newBoard, currentRound, oppCard);
                    return newBoard;
                  });
              setWinners(function (prev) {
                    var newWinners = prev.slice(0);
                    Belt_Array.set(newWinners, currentRound, winnerText);
                    return newWinners;
                  });
              var currentWins = Belt_Array.keep(winners, (function (w) {
                      if (w === "You win") {
                        return true;
                      } else {
                        return false;
                      }
                    })).length;
              var myWins = currentWins + (
                winnerText === "You win" ? 1 : 0
              ) | 0;
              var currentOppWins = Belt_Array.keep(winners, (function (w) {
                      if (w === "Opponent wins") {
                        return true;
                      } else {
                        return false;
                      }
                    })).length;
              var oppWins = currentOppWins + (
                winnerText === "Opponent wins" ? 1 : 0
              ) | 0;
              setOppCard(function (param) {
                    
                  });
              var nextRound = currentRound + 1 | 0;
              setCurrentRound(function (param) {
                    return nextRound;
                  });
              setWaiting(function (param) {
                    return false;
                  });
              if (myWins >= 5 || oppWins >= 5 || nextRound >= 9) {
                var finalWinner = myWins >= 5 ? "You are the winner!" : (
                    oppWins >= 5 ? "Opponent wins the game!" : (
                        myWins > oppWins ? "You are the winner!" : (
                            oppWins > myWins ? "Opponent wins the game!" : "It's a tie!"
                          )
                      )
                  );
                setGameOver(function (param) {
                      return finalWinner;
                    });
              }
              
            }
            
          }
          
        }), [
        myBoard,
        oppCard
      ]);
  if (role === "") {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("button", {
                        children: "새 게임 시작",
                        className: "m-2 px-4 py-2 bg-green-500 text-white rounded",
                        onClick: (function (param) {
                            setRole(function (param) {
                                  return "host";
                                });
                          })
                      }),
                  JsxRuntime.jsx("button", {
                        children: "게임 참여",
                        className: "m-2 px-4 py-2 bg-purple-500 text-white rounded",
                        onClick: (function (param) {
                            setRole(function (param) {
                                  return "join";
                                });
                          })
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  }
  if (role === "host" && conn === undefined) {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("span", {
                                children: "Your ID: " + localId
                              }),
                          JsxRuntime.jsx("button", {
                                children: "복사",
                                className: "px-2 py-1 bg-gray-200 rounded text-xs",
                                onClick: (function (param) {
                                    Js_promise.then_((function () {
                                            setCopied(function (param) {
                                                  return true;
                                                });
                                            setTimeout((function () {
                                                    setCopied(function (param) {
                                                          return false;
                                                        });
                                                  }), 1200);
                                            return Promise.resolve();
                                          }), navigator.clipboard.writeText(localId));
                                  })
                              }),
                          match$19[0] ? JsxRuntime.jsx("span", {
                                  children: "복사됨!",
                                  className: "text-green-500 text-xs ml-2"
                                }) : null
                        ],
                        className: "flex items-center space-x-2"
                      }),
                  JsxRuntime.jsx("div", {
                        children: "이 ID를 친구에게 공유하세요."
                      }),
                  JsxRuntime.jsx("div", {
                        children: "상대방의 연결을 기다리는 중...",
                        className: "mt-4"
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  }
  if (role === "join" && conn === undefined) {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("input", {
                        className: "border p-2",
                        placeholder: "방장 ID 입력",
                        value: remoteIdInput,
                        onChange: (function (e) {
                            setRemoteIdInput(function (param) {
                                  return e.target.value;
                                });
                          })
                      }),
                  JsxRuntime.jsx("button", {
                        children: "연결",
                        className: "m-2 px-4 py-2 bg-blue-500 text-white rounded",
                        onClick: (function (param) {
                            setConnStatus(function (param) {
                                  return "연결 중...";
                                });
                            var trimmedId = remoteIdInput.trim();
                            var c = GameNetwork.connect(peer, trimmedId);
                            setConn(function (param) {
                                  return Caml_option.some(c);
                                });
                          })
                      }),
                  JsxRuntime.jsx("div", {
                        children: connStatus
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  }
  if (conn === undefined) {
    return JsxRuntime.jsx("div", {
                children: "연결 상태: " + connStatus,
                className: "flex items-center p-4"
              });
  }
  if (oppRand === undefined || myRand === undefined) {
    return JsxRuntime.jsx("div", {
                children: "팀 결정 중...",
                className: "flex flex-col items-center p-4"
              });
  }
  if (myTeam === undefined && oppRand !== undefined && myRand !== undefined) {
    return JsxRuntime.jsx("div", {
                children: "팀 결정 중...",
                className: "flex flex-col items-center p-4"
              });
  }
  if (myTeam !== undefined && !match$5[0]) {
    var team = Belt_Option.getExn(myTeam);
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: "당신은 " + (
                          team === "red" ? "Red" : "Blue"
                        ) + " 팀입니다."
                      }),
                  JsxRuntime.jsx("button", {
                        children: "게임 시작",
                        className: "m-2 px-4 py-2 rounded " + (
                          team === "red" ? "bg-red-500 text-white" : "bg-blue-500 text-white"
                        ),
                        onClick: (function (param) {
                            setPlayerColor(function (param) {
                                  return team;
                                });
                            setGameStarted(function (param) {
                                  return true;
                                });
                          })
                      })
                ],
                className: "flex flex-col items-center p-4"
              });
  }
  var myWins = Belt_Array.keep(winners, (function (w) {
          if (w === "You win") {
            return true;
          } else {
            return false;
          }
        })).length;
  var oppWins = Belt_Array.keep(winners, (function (w) {
          if (w === "Opponent wins") {
            return true;
          } else {
            return false;
          }
        })).length;
  var tmp;
  if (currentRound > 0) {
    var match$20 = Belt_Array.get(winners, currentRound - 1 | 0);
    if (match$20 !== undefined) {
      var result = Caml_option.valFromOption(match$20);
      tmp = result !== undefined ? JsxRuntime.jsx("div", {
              children: "Round " + String(currentRound) + " result: " + result,
              className: "my-2"
            }) : null;
    } else {
      tmp = null;
    }
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsx("section", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("span", {
                                    children: "Opponent's Hand:",
                                    className: "mr-2"
                                  }),
                              Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                          return c % 2 === 1;
                                        })), (function (card, i) {
                                      return JsxRuntime.jsx(Card.make, {
                                                  number: 1,
                                                  onClick: (function () {
                                                      
                                                    }),
                                                  selected: false,
                                                  disabled: true,
                                                  teamColor: "white",
                                                  isHidden: true
                                                }, "opp-white-" + String(card) + "-" + String(i));
                                    })),
                              Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                          return c % 2 === 0;
                                        })), (function (card, i) {
                                      return JsxRuntime.jsx(Card.make, {
                                                  number: 2,
                                                  onClick: (function () {
                                                      
                                                    }),
                                                  selected: false,
                                                  disabled: true,
                                                  teamColor: "black",
                                                  isHidden: true
                                                }, "opp-black-" + String(card) + "-" + String(i));
                                    }))
                            ],
                            className: "flex flex-row items-center mr-4"
                          }),
                      className: "flex flex-row mb-2"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(match$3[0], (function (i, cardOpt) {
                              var match = Belt_Array.get(winners, i);
                              var winnerBgOpp;
                              if (match !== undefined) {
                                var w = Caml_option.valFromOption(match);
                                winnerBgOpp = w !== undefined ? (
                                    w === "Opponent wins" ? " bg-red-200" : (
                                        w === "You win" ? " bg-gray-200" : " bg-yellow-200"
                                      )
                                  ) : "";
                              } else {
                                winnerBgOpp = "";
                              }
                              var showCard = Belt_Option.isSome(gameOver);
                              var displayCard = showCard ? cardOpt : undefined;
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: displayCard,
                                          className: "transform rotate-180" + winnerBgOpp,
                                          teamColor: oppColor
                                        }, "opp-" + String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                waiting ? JsxRuntime.jsx("div", {
                        children: "Waiting for opponent...",
                        className: "my-2"
                      }) : null,
                JsxRuntime.jsx("div", {
                      children: "Score: You " + String(myWins) + " - " + String(oppWins) + " Opponent",
                      className: "my-2 text-lg font-bold"
                    }),
                tmp,
                JsxRuntime.jsx("section", {
                      children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                              var ringClass = i === currentRound ? (
                                  playerColor === "blue" ? "ring-4 ring-blue-400" : "ring-4 ring-red-400"
                                ) : "";
                              var match = Belt_Array.get(winners, i);
                              var winnerBgMy;
                              if (match !== undefined) {
                                var w = Caml_option.valFromOption(match);
                                winnerBgMy = w !== undefined ? (
                                    w === "You win" ? " bg-green-200" : (
                                        w === "Opponent wins" ? " bg-gray-200" : " bg-yellow-200"
                                      )
                                  ) : "";
                              } else {
                                winnerBgMy = "";
                              }
                              return JsxRuntime.jsx(BoardSlot.make, {
                                          round: i + 1 | 0,
                                          card: cardOpt,
                                          className: ringClass + winnerBgMy,
                                          teamColor: playerColor
                                        }, String(i));
                            })),
                      className: "flex flex-row mb-6"
                    }),
                JsxRuntime.jsx("section", {
                      children: Belt_Array.map(match[0], (function (n) {
                              return JsxRuntime.jsx(Card.make, {
                                          number: n,
                                          onClick: (function () {
                                              var match = Belt_Array.get(myBoard, currentRound);
                                              if (match !== undefined && !(Caml_option.valFromOption(match) !== undefined || conn === undefined)) {
                                                setMyBoard(function (prevBoard) {
                                                      var newBoard = prevBoard.slice(0);
                                                      Belt_Array.set(newBoard, currentRound, n);
                                                      return newBoard;
                                                    });
                                                setHand(function (prevHand) {
                                                      return Belt_Array.keep(prevHand, (function (c) {
                                                                    return c !== n;
                                                                  }));
                                                    });
                                                GameNetwork.sendPlayCard(Caml_option.valFromOption(conn), n);
                                                return setWaiting(function (param) {
                                                            return true;
                                                          });
                                              }
                                              
                                            }),
                                          selected: false,
                                          disabled: waiting || Belt_Option.isSome(gameOver),
                                          teamColor: playerColor
                                        }, n.toString());
                            })),
                      className: "flex flex-row"
                    }),
                gameOver !== undefined ? JsxRuntime.jsx("div", {
                        children: "Game Over: " + gameOver,
                        className: "mt-4 text-2xl font-bold"
                      }) : null
              ],
              className: "flex flex-col items-center p-4"
            });
}

var make = App;

export {
  make ,
}
/* Card Not a pure module */
