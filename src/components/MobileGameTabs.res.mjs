// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.res.mjs";
import * as BoardSlot from "./BoardSlot.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function MobileGameTabs(props) {
  var resetGame = props.resetGame;
  var onCardClick = props.onCardClick;
  var gameOver = props.gameOver;
  var winners = props.winners;
  var oppColor = props.oppColor;
  var playerColor = props.playerColor;
  var oppHand = props.oppHand;
  var oppBoard = props.oppBoard;
  var myBoard = props.myBoard;
  var waiting = props.waiting;
  var currentRound = props.currentRound;
  var onTabChange = props.onTabChange;
  var activeTab = props.activeTab;
  var tmp;
  switch (activeTab) {
    case "MyView" :
        tmp = JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "ÎÇ¥ Î≥¥Îìú",
                              className: "text-lg font-semibold mb-3 text-center"
                            }),
                        JsxRuntime.jsx("div", {
                              children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                                      var ringClass = i === currentRound ? (
                                          playerColor === "blue" ? "ring-2 ring-blue-400" : "ring-2 ring-red-400"
                                        ) : "";
                                      var match = Belt_Array.get(winners, i);
                                      var winnerBgMy;
                                      if (match !== undefined) {
                                        var w = Caml_option.valFromOption(match);
                                        winnerBgMy = w !== undefined ? (
                                            w === "You win" ? " bg-green-200" : (
                                                w === "Opponent wins" ? " bg-gray-200" : " bg-yellow-200"
                                              )
                                          ) : "";
                                      } else {
                                        winnerBgMy = "";
                                      }
                                      return JsxRuntime.jsx(BoardSlot.make, {
                                                  round: i + 1 | 0,
                                                  card: cardOpt,
                                                  className: ringClass + winnerBgMy,
                                                  teamColor: playerColor,
                                                  isMobile: true
                                                }, String(i));
                                    })),
                              className: "flex flex-wrap gap-1 justify-center"
                            })
                      ]
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "ÎÇ¥ Ìå®",
                              className: "text-lg font-semibold mb-3 text-center"
                            }),
                        JsxRuntime.jsx("div", {
                              children: Belt_Array.map(props.hand, (function (n) {
                                      return JsxRuntime.jsx(Card.make, {
                                                  number: n,
                                                  onClick: (function () {
                                                      onCardClick(n);
                                                    }),
                                                  selected: false,
                                                  disabled: waiting || Belt_Option.isSome(gameOver),
                                                  teamColor: playerColor
                                                }, n.toString());
                                    })),
                              className: "flex flex-wrap gap-1 justify-center"
                            })
                      ]
                    })
              ],
              className: "space-y-6"
            });
        break;
    case "OpponentView" :
        tmp = JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "ÏÉÅÎåÄ Î≥¥Îìú",
                              className: "text-lg font-semibold mb-3 text-center"
                            }),
                        JsxRuntime.jsx("div", {
                              children: Belt_Array.mapWithIndex(oppBoard, (function (i, cardOpt) {
                                      var match = Belt_Array.get(winners, i);
                                      var winnerBgOpp;
                                      if (match !== undefined) {
                                        var w = Caml_option.valFromOption(match);
                                        winnerBgOpp = w !== undefined ? (
                                            w === "Opponent wins" ? " bg-red-200" : (
                                                w === "You win" ? " bg-gray-200" : " bg-yellow-200"
                                              )
                                          ) : "";
                                      } else {
                                        winnerBgOpp = "";
                                      }
                                      var showCard = Belt_Option.isSome(gameOver);
                                      var displayCard = showCard ? cardOpt : undefined;
                                      return JsxRuntime.jsx(BoardSlot.make, {
                                                  round: i + 1 | 0,
                                                  card: displayCard,
                                                  className: winnerBgOpp,
                                                  teamColor: oppColor,
                                                  isMobile: true
                                                }, "opp-" + String(i));
                                    })),
                              className: "flex flex-wrap gap-1 justify-center"
                            })
                      ]
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h3", {
                              children: "ÏÉÅÎåÄÎ∞© Ìå®",
                              className: "text-lg font-semibold mb-3 text-center"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                            return c % 2 === 1;
                                          })), (function (card, i) {
                                        return JsxRuntime.jsx(Card.make, {
                                                    number: 1,
                                                    onClick: (function () {
                                                        
                                                      }),
                                                    selected: false,
                                                    disabled: true,
                                                    teamColor: "white",
                                                    isHidden: true
                                                  }, "opp-white-" + String(card) + "-" + String(i));
                                      })),
                                Belt_Array.mapWithIndex(Belt_Array.keep(oppHand, (function (c) {
                                            return c % 2 === 0;
                                          })), (function (card, i) {
                                        return JsxRuntime.jsx(Card.make, {
                                                    number: 2,
                                                    onClick: (function () {
                                                        
                                                      }),
                                                    selected: false,
                                                    disabled: true,
                                                    teamColor: "black",
                                                    isHidden: true
                                                  }, "opp-black-" + String(card) + "-" + String(i));
                                      }))
                              ],
                              className: "flex flex-wrap gap-1 justify-center"
                            })
                      ]
                    })
              ],
              className: "space-y-6"
            });
        break;
    case "GameBoard" :
        var tmp$1;
        if (gameOver !== undefined) {
          tmp$1 = JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: "Í≤åÏûÑ Ï¢ÖÎ£å!",
                        className: "text-lg font-bold text-blue-800 mb-1"
                      }),
                  JsxRuntime.jsx("div", {
                        children: gameOver,
                        className: "text-sm mb-3"
                      }),
                  JsxRuntime.jsx("button", {
                        children: "üéÆ ÏÉà Í≤åÏûÑ ÏãúÏûë",
                        className: "w-full py-2 bg-green-500 hover:bg-green-600 text-white font-semibold rounded-lg text-sm transition-colors duration-200",
                        onClick: (function (param) {
                            resetGame();
                          })
                      })
                ],
                className: "bg-blue-50 p-3 rounded-lg text-center"
              });
        } else if (currentRound > 0) {
          var match = Belt_Array.get(winners, currentRound - 1 | 0);
          if (match !== undefined) {
            var result = Caml_option.valFromOption(match);
            tmp$1 = result !== undefined ? JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: "ÎùºÏö¥Îìú " + String(currentRound) + " Í≤∞Í≥º",
                            className: "text-sm font-medium"
                          }),
                      JsxRuntime.jsx("div", {
                            children: result,
                            className: "text-xs text-gray-600 mt-1"
                          })
                    ],
                    className: "bg-gray-50 p-2 rounded-lg text-center"
                  }) : null;
          } else {
            tmp$1 = null;
          }
        } else {
          tmp$1 = null;
        }
        tmp = JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h3", {
                      children: "Í≤åÏûÑ Î≥¥Îìú Ï†ÑÏ≤¥",
                      className: "text-lg font-semibold text-center"
                    }),
                tmp$1,
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: "ÏÉÅÎåÄÎ∞©",
                                      className: "text-sm font-medium text-center mb-2"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: Belt_Array.mapWithIndex(oppBoard, (function (i, cardOpt) {
                                              var showCard = Belt_Option.isSome(gameOver);
                                              var displayCard = showCard ? cardOpt : undefined;
                                              return JsxRuntime.jsx(BoardSlot.make, {
                                                          round: i + 1 | 0,
                                                          card: displayCard,
                                                          className: "transform scale-75",
                                                          teamColor: oppColor,
                                                          isMobile: true
                                                        }, "summary-opp-" + String(i));
                                            })),
                                      className: "flex flex-wrap gap-1 justify-center"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: "ÎÇò",
                                      className: "text-sm font-medium text-center mb-2"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: Belt_Array.mapWithIndex(myBoard, (function (i, cardOpt) {
                                              var ringClass = i === currentRound ? (
                                                  playerColor === "blue" ? "ring-1 ring-blue-400" : "ring-1 ring-red-400"
                                                ) : "";
                                              return JsxRuntime.jsx(BoardSlot.make, {
                                                          round: i + 1 | 0,
                                                          card: cardOpt,
                                                          className: ringClass + " transform scale-75",
                                                          teamColor: playerColor,
                                                          isMobile: true
                                                        }, "summary-my-" + String(i));
                                            })),
                                      className: "flex flex-wrap gap-1 justify-center"
                                    })
                              ]
                            })
                      ],
                      className: "space-y-3"
                    })
              ],
              className: "space-y-3 pb-4"
            });
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("button", {
                                    children: "ÎÇ¥ Ìå®",
                                    className: activeTab === "MyView" ? "flex-1 py-3 px-4 text-center font-semibold text-blue-600 border-b-2 border-blue-600 bg-blue-50" : "flex-1 py-3 px-4 text-center font-medium text-gray-600 border-b-2 border-transparent hover:text-gray-800",
                                    onClick: (function (param) {
                                        onTabChange("MyView");
                                      })
                                  }),
                              JsxRuntime.jsx("button", {
                                    children: "ÏÉÅÎåÄ Ìå®",
                                    className: activeTab === "OpponentView" ? "flex-1 py-3 px-4 text-center font-semibold text-blue-600 border-b-2 border-blue-600 bg-blue-50" : "flex-1 py-3 px-4 text-center font-medium text-gray-600 border-b-2 border-transparent hover:text-gray-800",
                                    onClick: (function (param) {
                                        onTabChange("OpponentView");
                                      })
                                  }),
                              JsxRuntime.jsx("button", {
                                    children: "Í≤åÏûÑ Î≥¥Îìú",
                                    className: activeTab === "GameBoard" ? "flex-1 py-3 px-4 text-center font-semibold text-blue-600 border-b-2 border-blue-600 bg-blue-50" : "flex-1 py-3 px-4 text-center font-medium text-gray-600 border-b-2 border-transparent hover:text-gray-800",
                                    onClick: (function (param) {
                                        onTabChange("GameBoard");
                                      })
                                  })
                            ],
                            className: "flex"
                          }),
                      className: "flex-shrink-0"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("span", {
                                      children: "Score: " + String(props.myWins) + " - " + String(props.oppWins),
                                      className: "font-medium"
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: "Round " + String(currentRound + 1 | 0) + "/9",
                                      className: "text-gray-600"
                                    })
                              ],
                              className: "flex justify-between items-center"
                            }),
                        waiting ? JsxRuntime.jsx("div", {
                                children: "ÏÉÅÎåÄÎ∞©ÏùÑ Í∏∞Îã§Î¶¨Îäî Ï§ë...",
                                className: "text-center text-blue-600 mt-1"
                              }) : null
                      ],
                      className: "px-4 py-2 bg-gray-50 text-sm flex-shrink-0"
                    }),
                JsxRuntime.jsx("div", {
                      children: tmp,
                      className: "flex-1 overflow-y-auto overflow-x-hidden p-4"
                    })
              ],
              className: "bg-white border-b border-gray-200 flex flex-col h-full"
            });
}

var make = MobileGameTabs;

export {
  make ,
}
/* Card Not a pure module */
